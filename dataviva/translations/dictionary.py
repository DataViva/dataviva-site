# -*- coding: utf-8 -*-
from flask.ext.babel import gettext, ngettext


def dictionary():

    return {

        # App Titles
        "compare": gettext("Compare"),
        "occugrid": gettext("Occugrid"),
        "geo_map": gettext("Geo Map"),
        "network": gettext("Network"),
        "rings": gettext("Rings"),
        "scatter": gettext("Scatter"),
        "stacked": gettext("Stacked"),
        "tree_map": gettext("Tree Map"),
        "line": gettext("Line"),
        "bar": gettext("Bar Chart"),
        "box": gettext("Box Plot"),

        # Time Resolution Toggle
        "time": gettext("Time Resolution"),
        "time_desc_stacked": gettext("Changes the time resolution between yearly and monthly."),
        "time_desc_line": gettext("Changes the time resolution between yearly and monthly."),

        # Axes
        "axes": gettext("Axes"),
        "axes_desc_compare": gettext("Changes the X and Y variables used in the chart."),
        "x": gettext("X Axis"),
        "x_desc_scatter": gettext("Changes the X axis variable."),
        "y": gettext("Y Axis"),
        "y_desc_stacked": gettext("Changes the Y axis variable."),
        "y_desc_scatter": gettext("Changes the Y axis variable."),
        "y_desc_line": gettext("Changes the Y axis variable."),
        "y_desc_box": gettext("Changes the Y axis variable."),

        # Stacked Area Sorting/Order
        "order": gettext("Order"),
        "sort_desc_stacked": gettext("Changes the ordering of the visible areas based on the selected sorting."),
        "asc": gettext("Ascending"),
        "desc": gettext("Descending"),

        # Stacked Area Layout Type
        "layout": gettext("Layout"),
        "layout_desc_stacked": gettext("Changes the X axis between value and market share."),
        "value": gettext("Value"),
        "share": gettext("Market Share"),

        # RCA Scope Toggle
        "rca_scope": gettext("RCA Scope"),
        "rca_scope_desc_network": gettext("Changes which RCA variable is used when highlighting products in the visualization."),
        "rca_scope_desc_rings": gettext("Changes which RCA variable is used when highlighting products in the visualization."),
        "rca_scope_desc_scatter": gettext("Changes which RCA variable is used when highlighting products in the visualization."),
        "bra_rca": gettext("Domestic"),
        "wld_rca": gettext("International"),

        # Scale Toggle
        "scale": gettext("Scale"),
        "scale_desc_compare": gettext("Changes the mathematical scale used on both axes."),
        "scale_desc_line": gettext("Changes the mathematical scale used on both axes."),
        "scale_desc_box": gettext("Changes the mathematical scale used on both axes."),
        "log": gettext("Log"),
        "linear": gettext("Linear"),

        # Spotlight Toggle
        "spotlight": gettext("Highlight RCA"),
        "spotlight_desc_network": gettext("Removes coloring from nodes which do not have RCA."),
        "spotlight_scatter": gettext("Hide RCA"),
        "spotlight_scatter_desc_scatter": gettext("Hides nodes that have RCA."),
        "true": gettext("On"),
        "false": gettext("Off"),

        # Sorting Toggle
        "sorting": gettext("Sort"),
        "sort": gettext("Sort"),
        "order_desc_stacked": gettext("Changes the variable used to order the areas."),
        "order_desc_occugrid": gettext("Changes the variable used to order the donut charts."),

        # Sizing Labels
        "sizing": gettext("Size"),
        "sizing_desc_tree_map": gettext("Changes the variable used to size the rectangles."),
        "sizing_desc_network": gettext("Changes the variable used to size the circles."),
        "sizing_desc_compare": gettext("Changes the variable used to size the circles."),
        "sizing_desc_occugrid": gettext("Changes the variable used to size the circles."),
        "sizing_desc_scatter": gettext("Changes the variable used to size the circles."),

        # Color Labels
        "color_toggle": gettext("Color"),
        "color_desc_tree_map": gettext("Changes the variable used to color the rectangles."),
        "color_desc_stacked": gettext("Changes the variable used to color the areas."),
        "color_desc_geo_map": gettext("Changes the variable used to color the locations."),
        "color_desc_network": gettext("Changes the variable used to color the circles."),
        "color_desc_rings": gettext("Changes the variable used to color the circles."),
        "color_desc_compare": gettext("Changes the variable used to color the circles."),
        "color_desc_occugrid": gettext("Changes the variable used to color the circles."),
        "color_desc_scatter": gettext("Changes the variable used to color the circles."),

        # Other Control Labels
        "active": gettext("Available"),
        "available": gettext("Available"),
        "not_available": gettext("Not available"),
        "grouping": gettext("Grouping"),
        "grouping_desc_occugrid": gettext("Groups the donut charts into different categorizations."),
        "none": gettext("None"),
        "year": gettext("Year"),
        "month": gettext("Month"),
        "month_1": gettext("Jan"),
        "month_2": gettext("Feb"),
        "month_3": gettext("Mar"),
        "month_4": gettext("Apr"),
        "month_5": gettext("May"),
        "month_6": gettext("Jun"),
        "month_7": gettext("Jul"),
        "month_8": gettext("Aug"),
        "month_9": gettext("Sep"),
        "month_10": gettext("Oct"),
        "month_11": gettext("Nov"),
        "month_12": gettext("Dec"),

        # Filter Depths
        "depth": gettext("Depth"),
        "depth_desc_tree_map": gettext("Changes the level of aggregation."),
        "depth_desc_stacked": gettext("Changes the level of aggregation."),
        "depth_desc_geo_map": gettext("Changes the level of aggregation."),
        "depth_desc_network": gettext("Changes the level of aggregation."),
        "depth_desc_rings": gettext("Changes the level of aggregation."),
        "depth_desc_compare": gettext("Changes the level of aggregation."),
        "depth_desc_occugrid": gettext("Changes the level of aggregation."),
        "depth_desc_scatter": gettext("Changes the level of aggregation."),
        "depth_desc_line": gettext("Changes the level of aggregation."),
        "bra_1": gettext("Region"),
        "bra_3": gettext("State"),
        "bra_5": gettext("Mesoregion"),
        "bra_7": gettext("Microregion"),
        "bra_8": gettext("Planning Region"),
        "bra_9": gettext("Municipality"),
        "cbo_1": gettext("Main Group"),
        "cbo_2": gettext("Principal Subgroup"),
        "cbo_3": gettext("Subgroup"),
        "cbo_4": gettext("Family"),
        "cbo_6": gettext("Occupation"),
        "cnae_1": gettext("Section"),
        "cnae_3": gettext("Division"),
        "cnae_4": gettext("Group"),
        "cnae_6": gettext("Class"),
        "hs_2": gettext("Section"),
        "hs_4": gettext("Chapter"),
        "hs_6": gettext("Position"),
        "hs_8": gettext("Sub-Position"),
        "wld_2": gettext("Continent"),
        "wld_5": gettext("Country"),
        "bra_1_plural": gettext("Regions"),
        "bra_3_plural": gettext("States"),
        "bra_5_plural": gettext("Mesoregions"),
        "bra_7_plural": gettext("Microregions"),
        "bra_8_plural": gettext("Planning Regions"),
        "bra_9_plural": gettext("Municipalities"),
        "cbo_1_plural": gettext("Main Groups"),
        "cbo_2_plural": gettext("Principal Subgroups"),
        "cbo_3_plural": gettext("Subgroups"),
        "cbo_4_plural": gettext("Families"),
        "cbo_6_plural": gettext("Occupations"),
        "cnae_1_plural": gettext("Sections"),
        "cnae_3_plural": gettext("Divisions"),
        "cnae_4_plural": gettext("Groups"),
        "cnae_6_plural": gettext("Classes"),
        "hs_2_plural": gettext("Sections"),
        "hs_4_plural": gettext("Chapters"),
        "hs_6_plural": gettext("Positions"),
        "hs_8_plural": gettext("Sub-Positions"),
        "wld_2_plural": gettext("Continents"),
        "wld_5_plural": gettext("Countries"),
        "course_hedu": gettext("Major"),
        "course_hedu_2": gettext("Field"),
        "course_hedu_6": gettext("Major"),
        "course_hedu_plural": gettext("Majors"),
        "course_hedu_2_plural": gettext("Fields"),
        "course_hedu_6_plural": gettext("Majors"),
        "course_sc": gettext("Course"),
        "course_sc_2": gettext("Field"),
        "course_sc_5": gettext("Course"),
        "course_sc_plural": gettext("Courses"),
        "course_sc_2_plural": gettext("Fields"),
        "course_sc_5_plural": gettext("Courses"),
        "university": gettext("University"),
        "university_5": gettext("University"),
        "university_plural": gettext("Universities"),
        "university_5_plural": gettext("Universities"),
        "school_8": gettext("School"),
        "school_8_plural": gettext("Schools"),

        # Calculation Labels
        "eci": gettext("Economic Complexity"),
        "eci_desc": gettext("Economic Complexity measures how diversified and complex a location's export production is."),
        "pci": gettext("Product Complexity"),
        "pci_desc": gettext("Product Complexity is a measure of how complex a product is, based on how many countries export the product and how diversified those exporters are."),

        "bra_diversity": gettext("Location Diversity"),
        "bra_diversity_desc": gettext("The number of unique municipalities where a given variable is present."),
        "bra_diversity_eff": gettext("Effective Location Diversity"),
        "bra_diversity_eff_desc": gettext("The diversity of a given variable corrected for the share that each unit represents."),

        "cnae_diversity": gettext("Industry Diversity"),
        "cnae_diversity_desc": gettext("The number of unique 6-digit CNAE industries that are present for a given variable."),
        "cnae_diversity_eff": gettext("Effective Industry Diversity"),
        "cnae_diversity_eff_desc": gettext("The diversity of a given variable corrected for the share that each unit represents."),

        "cbo_diversity": gettext("Occupation Diversity"),
        "cbo_diversity_desc": gettext("The number of unique 4-digit CBO occupations that are present for a given variable."),
        "cbo_diversity_eff": gettext("Effective Occupation Diversity"),
        "cbo_diversity_eff_desc": gettext("The diversity of a given variable corrected for the share that each unit represents."),

        "hs_diversity": gettext("Product Diversity"),
        "hs_diversity_desc": gettext("The number of unique HS4 products that are present for a given variable."),
        "hs_diversity_eff": gettext("Effective Product Diversity"),
        "hs_diversity_eff_desc": gettext("The diversity of a given variable corrected for the share that each unit represents."),

        "wld_diversity": gettext("Export Destination Diversity"),
        "wld_diversity_desc": gettext("The number of unique import countries that are present for a given variable."),
        "wld_diversity_eff": gettext("Effective Export Destination Diversity"),
        "wld_diversity_eff_desc": gettext("The diversity of a given variable corrected for the share that each unit represents."),

        "distance": gettext("Distance"),
        "distance_desc": gettext('Distance is a measure used to indicate how "far away" any given location is from a particular industry, occupation or product.'),
        "distance_wld": gettext("International Distance"),
        "employed": gettext("Employed"),
        "importance": gettext("Importance"),
        "importance_desc": gettext("Importance measures the ubiquity of a given occupation in a particular industry. Occupations with a high importance in an industry are commonly employed in said industry."),
        "elsewhere": gettext("Employees Available In Other Industries"),
        "required": gettext("Estimated Employees"),
        "required_desc": gettext("The number of jobs needed in order to have RCA in an industry in a particular location, based on the averages of locations with similar industrial composition and RCA in the specific industry."),
        "required_bras": gettext("Similar Locations"),
        "required_bras_desc": gettext("These are the similar locations used to calculate the number of Estimated Employees:"),
        "required_bras_desc_top": gettext("These are the top 10 most similar locations used to calculate the number of Estimated Employees:"),
        "growth_val": gettext("Wage Growth"),
        "growth_val_total": gettext("Cumulative Wage Growth"),
        "proximity": gettext("Proximity"),
        "rca": gettext("Domestic RCA"),
        "rca_desc": gettext("Revealed Comparative Advantage is a numeric value used to connote whether a particular product or industry is especially prominent in a location."),
        "rca_wld": gettext("International RCA"),

        "opp_gain": gettext("Opportunity Gain"),
        "opp_gain_desc": gettext("Opportunity gain is a measure that indicates how much diversity is offered by an industry or product should the given location develop it."),
        "opp_gain_wld": gettext("International Opportunity Gain"),

        "export_val_growth": gettext("Nominal Export Growth (1 year)"),
        "export_val_growth_5": gettext("Nominal Export Growth (5 year)"),
        "import_val_growth": gettext("Nominal Import Growth (1 year)"),
        "import_val_growth_5": gettext("Nominal Import Growth (5 year)"),

        "wage_growth": gettext("Nominal Wage Growth (1 year)"),
        "wage_growth_5": gettext("Nominal Wage Growth (5 year)"),
        "num_emp_growth": gettext("Nominal Employee Growth (1 year)"),
        "num_emp_growth_5": gettext("Nominal Employee Growth (5 year)"),

        "enrolled_growth": gettext("Nominal Enrollment Growth (1 year)"),
        "enrolled_growth_5": gettext("Nominal Enrollment Growth (5 years)"),
        "graduates_growth": gettext("Nominal Graduation Growth (1 year)"),

        # RAIS Labels
        "rais": gettext("Wages and Employment (RAIS)"),
        "rais_footer": gettext("Data provided by RAIS"),
        "num_jobs": gettext("Total Jobs"),
        "num_est": gettext("Total Establishments"),
        "num_jobs_est": gettext("Jobs per Establishment"),
        "wage": gettext("Total Monthly Wages"),
        "total_wage": gettext("Total Monthly Wage"),
        "wage_avg": gettext("Average Monthly Wage"),
        "wage_month": gettext("Monthly Wage"),
        "wage_avg_bra": gettext("Brazilian Average Wage"),

        # SECEX Labels
        "secex": gettext("International Trade (SECEX)"),
        "secex_footer": gettext("Data provided by SECEX"),
        "val_usd": gettext("Trade Value"),
        "export_val": gettext("Exports"),
        "export_kg": gettext("Export Weight"),
        "export_val_kg": gettext("Exports per kg"),
        "total_export_val": gettext("Total Exports"),
        "import_val": gettext("Imports"),
        "import_kg": gettext("Import Weight"),
        "import_val_kg": gettext("Imports per kg"),
        "total_import_val": gettext("Total Imports"),
        "trade_balance": gettext("Trade Balance"),
        "direction": gettext("Exports/Imports"),
        "exports": gettext("Exports"),
        "imports": gettext("Imports"),
        "origin": gettext("Origin"),
        "destination": gettext("Destination"),
        "origins": gettext("Import Origins"),
        "destinations": gettext("Export Destinations"),
        "to": gettext("to"),
        "from": gettext("from"),

        # HEDU Labels
        "hedu": gettext("Higher Education"),
        "hedu_footer": gettext("Data provided by INEP/MEC"),
        "enrolled": gettext("Enrolled"),
        "entrants": gettext("Entrants"),
        "graduates": gettext("Graduates"),
        "school_type": gettext("Funding"),
        "school_type_desc_box": gettext("Filters the data based on the administrative dependency of the school."),
        "school_type_id": gettext("Funding"),
        "morning": gettext("Morning"),
        "afternoon": gettext("Afternoon"),
        "night": gettext("Night"),
        "full_time": gettext("Full Time"),

        # SC Labels
        "sc": gettext("School Census"),
        "sc_footer": gettext("Data provided by INEP/MEC"),
        "classes": gettext("Classes"),
        "enrolled_classes": gettext("Average Class Size"),
        "age": gettext("Average Age"),
        "funding_p": gettext("Federal Public"),
        "funding_q": gettext("State Public"),
        "funding_r": gettext("Municipal Public"),
        "funding_s": gettext("Private"),

        # EI Labels
        "ei": gettext("Electronic Invoices (EI)"),
        "ei_footer": gettext("Data provided by SEF/MG"),
        "purchase_value": gettext("Purchase Value"),
        "purchase": gettext("Purchase"),
        "transfer_value": gettext("Transfer Value"),
        "transfer": gettext("Transfer"),

        # Key Labels
        "brazil": gettext("Brazil"),
        "bra_id": gettext("BRA ID"),
        "category": gettext("Sector"),
        "cbo_id": gettext("CBO ID"),
        "color": gettext("Sector"),
        "display_id": gettext("ID"),
        "hs_id": gettext("HS ID"),
        "id_ibge": gettext("IBGE ID"),
        "id": gettext("ID"),
        "cnae_id": gettext("CNAE ID"),
        "name": gettext("Name"),
        "name_en": gettext("Name (English)"),
        "name_pt": gettext("Name (Portuguese)"),
        "population": gettext("Population"),
        "top": gettext("Top"),
        "wld_id": gettext("WLD ID"),
        "id_mdic": gettext("MDIC ID"),
        "rank": " ",
        "university_id": gettext("ID"),
        "course_hedu_id": gettext("ID"),
        "school_id": gettext("ID"),
        "course_sc_id": gettext("ID"),
        "course_id": gettext("ID"),

        # Filter Titles
        "bra": gettext("Location"),
        "bra_plural": gettext("Locations"),
        "cbo": gettext("Occupation"),
        "cbo_plural": gettext("Occupations"),
        "hs": gettext("Product"),
        "hs_plural": gettext("Products"),
        "cnae": gettext("Industry"),
        "cnae_plural": gettext("Industries"),
        "wld": gettext("Trade Partner"),
        "wld_plural": gettext("Trade Partners"),
        "university": gettext("University"),
        "university_plural": gettext("Universities"),
        "course_hedu": gettext("Major"),
        "course_hedu_plural": gettext("Majors"),
        "school": gettext("School"),
        "school_plural": gettext("Schools"),
        "course_sc": gettext("Basic Course"),
        "course_sc_plural": gettext("Basic Courses"),
        "bra_s": gettext("Sending Location"),
        "bra_s_plural": gettext("Sending Locations"),
        "bra_r": gettext("Receiving Location"),
        "bra_r_plural": gettext("Receiving Locations"),
        "icon": gettext("Icon"),

        # File Types
        "download": gettext("Download"),
        "download_desc": gettext("Choose from the following file types:"),
        "csv": gettext("Save as CSV"),
        "csv_desc": gettext("A table format that can be imported into a database or opened with Microsoft Excel."),
        "pdf": gettext("Save as PDF"),
        "pdf_desc": gettext("Similar to SVG files, PDF files are vector-based and can be dynamically scaled."),
        "png": gettext("Save as PNG"),
        "png_desc": gettext("A standard image file, similar to JPG or BMP."),
        "svg": gettext("Save as SVG"),
        "svg_desc": gettext("A vector-based file that can be resized without worrying about pixel resolution."),

        # App Builder
        "all": gettext("All"),
        "basics": gettext("Basic Values"),
        "growth": gettext("Growth"),
        "calculations": gettext("Strategic Indicators"),
        "Data Provided by": gettext("Data Provided by"),
        "View more visualizations on the full DataViva.info website.": gettext("View more visualizations on the full DataViva.info website."),
        "related_apps": gettext("Related Visualizations"),
        "other_apps": gettext("Other Visualizations"),
        "crosswalk_hs": gettext("Common Industries"),
        "crosswalk_cnae": gettext("Common Products"),
        "crosswalk_cbo": gettext("Common Majors"),
        "crosswalk_course_hedu": gettext("Common Occupations"),
        "Show All Years": gettext("Show Historical Data"),
        "Build Not Available": gettext("Build Not Available"),
        "Building Visualization": gettext("Building Visualization"),
        "Downloading Additional Years": gettext("Downloading Historical Data"),
        "all_years": gettext("Click to download all available historical data. This may take a long time depending on your internet connection."),
        "and": gettext("and"),
        "showing": gettext("Showing only"),
        "excluding": gettext("Excluding"),
        "of": gettext("of"),
        "with": gettext("with"),
        "and": gettext("and"),
        "fill": gettext("Fill"),
        "embed_url": gettext("Embed URL"),
        "share_url": gettext("Shortened URL"),
        "social_media": gettext("Social Networks"),
        "secex_3": gettext("Based on State Production"),
        "secex_9": gettext("Based on the Exporting Municipality"),
        "embed_footer": gettext("View more visualizations on the full DataViva.info website."),

        "no_brazil": gettext("This visualization is not available when selecting the entirity of Brazil. Please select a more grainular location."),
        "only_brazil": gettext("Industry and Occupation distributions are only available when viewing the entirity of Brazil."),
        "only_deepest": gettext("This visualization is only available at the deepest nesting. Please select a more grainular filter."),

        # D3plus Text
        "Click for More Info": gettext("Click for more data and related visualizations."),
        "Click to Zoom": gettext("Click to Zoom"),
        "filter": gettext("Hide Group"),
        "solo": gettext("Solo Group"),
        "reset": gettext("Click to Reset all Filters"),
        "Primary Connections": gettext("Primary Connections"),
        "No Data Available": gettext("No Data Available"),
        "No Connections Available": gettext("No Connections Available"),

        # Ask Sabrina
        "Asked": gettext("Asked"),
        "by": gettext("by"),
        "point": gettext("Point"),
        "points": gettext("Points"),
        "reply": gettext("Reply"),
        "replies": gettext("Replies"),
        "votes": gettext("Most Active"),
        "newest": gettext("Most Recent"),
        "questions": gettext("Questions"),
        "learnmore": gettext("User Question"),
        "learnmore_plural": gettext("Learn more"),
        "flagged": gettext("This reply has been flagged."),
        "unflagged": gettext("This flag on this reply has been removed."),
        "voted": gettext("Your vote has been added."),
        "unvoted": gettext("Your vote was removed."),
        "classifications": gettext("Classifications"),

        # Admin
        "edit": gettext("Edit"),
        "visible": gettext("Visible"),
        "hidden": gettext("Hidden"),
        "user": gettext("User"),
        "admin": gettext("Admin"),
        "remove": gettext("Remove"),
        "deactivate": gettext("Deactivate"),
        "activate": gettext("activate"),
        "remove_confirmation": gettext("Are you sure to delete this item?"),

        # Selector & Search
        "loading": gettext("Loading"),
        "processing": gettext("Processing"),
        "search_results": gettext("Search Results"),
        "search_empty": gettext("No Matches"),
        "other": gettext("Other"),
        "select": gettext("Select"),
        "show": gettext("Show"),
        "loading_attrs": gettext("Loading Attribute List"),
        "loading_items": gettext("Loading More Items"),
        "wait": gettext("Please Wait"),
        "back": gettext("Back"),
        "remove_filter": gettext("Remove this Filter"),
        "Municipalities within": gettext("Municipalities within"),
        "No municipalities within that distance.": gettext("No municipalities within that distance."),
        "Including": gettext("Including"),
        "in": gettext("in"),
        "no_items": gettext("No Data Available"),

        "select_search_question": gettext("Select your question and click advance"),
        "select_search_bra": gettext("Select the Location and click advance"),
        "select_search_cbo": gettext("Select the Occupation and click advance"),
        "select_search_cnae": gettext("Select the Industry and click advance"),
        "select_search_hs": gettext("Select the Product and click advance"),
        "select_search_wld": gettext("Select the Trade Partner and click advance"),
        "select_search_university": gettext("Select the University and click advance"),
        "select_search_course_hedu": gettext("Select the Major Course and click advance"),
        "select_search_course_sc": gettext("Select the Basic Course and click advance"),

        # product profile
        "General": gettext("General"),
        "International Trade": gettext("International Trade"),
        "Economic Opportunities": gettext("Economic Opportunities"),
        "More details": gettext("More details"),
        "Total Value Exported": gettext("Total Value Exported"),
        "Ratio Net Weight / Total Value Exported": gettext("Ratio Net Weight / Total Value Exported"),
        "Total Value Imported": gettext("Total Value Imported"),
        "Ratio Net Weight / Total Value Imported": gettext("Ratio Net Weight / Total Value Imported"),
        "Product Complexity": gettext("Product Complexity"),
        "International RCA": gettext("International RCA"),
        "International Distance": gettext("International Distance"),
        "International Opportunity Gain": gettext("International Opportunity Gain"),
        "The_product": gettext("The products of the position of "),
        "are_number": gettext("are number "),
        " in imports and number": gettext(" in imports and number "),
        " in exports in Brazil. In ": gettext(" in exports in Brazil. In "),
        "its commercial value was of ": gettext("its commercial value was of "),
        ", representing a variation of ": gettext(", representing a variation of "),
        "in five years. The Brazilian state that most exports": gettext("in five years. The Brazilian state that most exports"),
        " and the one that imports the most is ": gettext(" and the one that imports the most is "),
        "occupies the": gettext("occupies the"),
        "position in exports": gettext("position in exports"),
        "in this location": gettext("in this location"),
        "In": gettext("In"),
        "in five years. The municipality": gettext("in five years. The municipality"),
        "which exports more": gettext("which exports more"),
        "Main Municipality by total value exported": gettext("Main Municipality by Total Value Exported"),
        "Main Municipality by total value imported": gettext("Main Municipality by Total Value Imported"),
        "Main Destination by total value exported": gettext("Main Destination by Total Value Exported"),
        "Main Origin by total value exported": gettext("Main Origin by Total Value Exported"),
        "Main Municipality": gettext("Main Municipality"),
        "by Total Value Exported": gettext("by Total Value Exported"),
        "by Total Value Imported": gettext("by Total Value Imported"),
        "Main Destination": gettext("Main Destination"),
        "Main Origin": gettext("Main Origin"),
        "municipality_in": gettext("in five years. The municipality in "),
        "product_state": gettext("in imports in the state of"),
        "mesoregions_in": gettext(" in imports in the mesoregions of"),
        "microregions_in": gettext(" in imports in the microregion of"),
        "five_years": gettext("in five years."),
        "and_number": gettext(" and number"),

        # all
        "preview": gettext("Preview"),
        "exports_by": gettext("Exports By"),
        "imports_by": gettext("Imports By"),
        "general_profile": gettext("General Profile"),

        # header
        "studies": gettext("Studies"),
        "news": gettext("News"),
        "contact": gettext("Contact"),
        "english": gettext("English"),
        "portuguese": gettext("Portuguese"),
        "about": gettext("ABOUT"),
        "search": gettext("SEARCH"),
        "star_search": gettext("START A SEARCH"),
        "partners": gettext("PARTNERS"),
        "help": gettext("HELP"),
        "login": gettext("Login"),
        "singup": gettext("Sign2 Up"),
        "or": gettext("or"),
        "basic_features": gettext("Basic Features"),
        "advanced_features": gettext("Advanced Features"),
        "edit_profile": gettext("Edit profile"),
        "welcome": gettext("Welcome"),
        "view_rankings": gettext("VIEW RANKINGS"),
        "make_graphs": gettext("MAKE GRAPHS"),
        "DATABASE_download": gettext("DATABASE DOWNLOAD"),

        # home
        "largest_plataform": gettext("Brazils largest platform for social and economic data search."),
        "totaly_open_and_free": gettext("Totally open and free."),
        "description": gettext("DataViva is a research tool that provides official data about exportation, economic activity, locality, education and occupation in Brazil. It consists of 11 apps that combined enable more than 1 billion visualizations."),
        "get_started": gettext("Get started "),
        "watch_videos": gettext("Watch the site video"),
        "testemonials": gettext("watch the testimonials"),
        "entrepreneurs": gettext("Entrepreneurs"),
        "entrepreneurs_desc": gettext("Identify the economic profile and business opportunities of a region"),
        "development_agents": gettext("Development Agents"),
        "developments_agents_desc": gettext("Assess development policies setting by location"),
        "students_and_professionals": gettext("Students and Professionals"),
        "students_and_professionals_desc": gettext("Find information about available jobs, income per occupation and courses"),
        "explore_our_database": gettext("Explore our database"),
        "explore_our_database_desc": gettext(u"DataViva gathers data from several sources: Employment and Income (RAIS), Brazilian International Trade (SECEX/MDCI), Basic and Technical Education (Censo Escolar), Post-Secondary Education (Censo da Educação Superior) and UN Comtrade International Trade."),
        "what_would_you_like_to_know": gettext("What would you like to know?"),
        "brasilian_locations": gettext("Brazilian Locations"),
        "econimic_activities": gettext("Economic Activities"),
        "sing_up_free_and": gettext("Sign Up free and make the most of DataViva"),
        "save_graphs": gettext("Save the graphs you need and get our free content in your e-mail. Signing up gives you access to exclusive resources to facilitate your research."),
        "free_sing_up": gettext("Free Sign Up"),
        "partners": gettext("Partners"),
        "promoters": gettext("Promoters"),

        # footer
        "about_min": gettext("About"),
        "support": gettext("Support"),
        "contact_us": gettext("Contact Us"),
        "the": gettext("The"),
        "database_download": gettext("Database Download"),
        "make_grohs": gettext("Make Graphs"),
        "view_rankings_min": gettext("View Rankings"),
        "help": gettext("Help"),
        "virtual_tour": gettext("Virtual Tour"),
        "message": gettext("Message"),

        # about
        "dataviva_answer": gettext("DataViva Answer"),
        "dear_admin": gettext("Dear Administrator."),
        "the_question": gettext("The question"),
        "was_publish/comented": gettext("was published/commented on DataViva."),
        "check_here": gettext("Check here."),
        "best_regards": gettext("Best Regards,"),
        "team": gettext("Team"),

        # product
        "wages_and_jobs": gettext("Wages and Jobs"),
        "avg_month_income": gettext("Average Monthly Income"),
        "payroll": gettext("Payroll"),
        "total_employment": gettext("Total Employment"),
        "total_establishment": gettext("Total of Establishments"),

        # occupation
        "main_employer_Municipality": gettext("Main employer Municipality"),
        "main_employer_activiy": gettext("Main employer activity"),
        "Municipality_highest_avg_income": gettext("Municipality with highest monthly average income"),
        "activity_highest_avg_income": gettext("Activity with highest monthly average income"),
        "related_profiles": gettext("Show Related Occupations"),
        "by_jobs": gettext("by Number of Jobs"),
        "main": gettext("Main"),
        "employer_Municipality": gettext("Employer Municipality"),
        "employer_activiy": gettext("Employer Activity"),
        "Municipality_highest": gettext("Municipality with Highest"),
        "monthly_average_income": gettext("Monthly Average Income"),
        "activity": gettext("Activity with Highest"),
        "jobs_by": gettext("Jobs by"),
        "jobs": gettext("jobs"),

        # data table
        "dataTableSearch": gettext("Search"),
        "emptyTable": gettext("No data available"),
        "infoResults": gettext("Showing _START_ to _END_ of _TOTAL_ results"),
        "infoEmpty": gettext("No data to show"),
        "infoFiltered": gettext(" (filtering _MAX_ results)"),
        "zeroRecords": gettext("No records found"),

        # build graphs
        "views": gettext("Views"),
        "graphs": gettext("Graphs"),
        "clean_selection": gettext("Clean selection"),
        "compare_with": gettext("Compare with"),

        #contact
        "contact_message": gettext("Your message has been sent successfully. We will soon get back to you."),
        "thank_you": gettext("Thank you"),

        #signup
        "email_already_exists": gettext("That e-mail is already registered."),
        "check_your_inbox": gettext("Please check your inbox at"),
        "invalid_password": gettext("Invalid email or password"),

        #errors
        "500": gettext("Sorry, an unexpected error has occured. Please try again"),
    }


def plurals(key=None, n=1):

    plurals = {

        # Number Formatting
        "T": ngettext("Trillion", "Trillions", n),
        "B": ngettext("Billion", "Billions", n),
        "M": ngettext("Million", "Millions", n),
        "k": ngettext("Thousand", "Thousands", n),

    }

    if key:
        return unicode(plurals[key]) if key in plurals else None
    return plurals
